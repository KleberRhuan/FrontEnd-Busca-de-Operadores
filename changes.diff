diff --git a/.prettierrc.json b/.prettierrc.json
index 29a2402..97a2d5d 100644
--- a/.prettierrc.json
+++ b/.prettierrc.json
@@ -2,5 +2,11 @@
   "$schema": "https://json.schemastore.org/prettierrc",
   "semi": false,
   "singleQuote": true,
-  "printWidth": 100
+  "printWidth": 100,
+  "trailingComma": "all",
+  "tabWidth": 2,
+  "useTabs": false,
+  "bracketSpacing": true,
+  "arrowParens": "always",
+  "endOfLine": "lf"
 }
diff --git a/README.md b/README.md
index 1322267..6ebfb0a 100644
--- a/README.md
+++ b/README.md
@@ -1,39 +1,181 @@
-# intuitive-care
+# Sistema de Cadastro de Operadores
 
-This template should help get you started developing with Vue 3 in Vite.
+Aplica√ß√£o Vue.js para visualiza√ß√£o, pesquisa e gerenciamento de operadoras de sa√∫de, com interface moderna e responsiva.
 
-## Recommended IDE Setup
+![Screenshot da Aplica√ß√£o](./docs/screenshot.png)
 
-[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).
+## Caracter√≠sticas
 
-## Type Support for `.vue` Imports in TS
+- üîç **Busca instant√¢nea** com debounce de digita√ß√£o
+- üì± **Interface responsiva** que funciona em dispositivos m√≥veis e desktop
+- üîÑ **Ordena√ß√£o avan√ßada** por todos os campos dispon√≠veis
+- üìä **Pagina√ß√£o eficiente** com controle de tamanho de p√°gina
+- üé® **Design moderno** com tema escuro e efeitos visuais
+- üöÄ **Alto desempenho** com otimiza√ß√µes de renderiza√ß√£o
+- üíæ **Persist√™ncia de prefer√™ncias** do usu√°rio para configura√ß√µes de tabela
 
-TypeScript cannot handle type information for `.vue` imports by default, so we replace the `tsc` CLI with `vue-tsc` for type checking. In editors, we need [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) to make the TypeScript language service aware of `.vue` types.
+## Tecnologias
 
-## Customize configuration
+- **Vue 3** com Composition API
+- **TypeScript** para tipagem est√°tica
+- **Vite** para desenvolvimento r√°pido
+- **Axios** para comunica√ß√£o com API
+- **Tailwind CSS** para estiliza√ß√£o
+- **Vue Use** para composables utilit√°rios
+- **Lucide Icons** para √≠cones vetoriais
 
-See [Vite Configuration Reference](https://vite.dev/config/).
+## Arquitetura
 
-## Project Setup
+O projeto segue uma arquitetura baseada em componentes com separa√ß√£o clara de responsabilidades:
 
-```sh
-npm install
+### Camadas Principais
+
+1. **Composables** - L√≥gica reutiliz√°vel (hooks)
+2. **Servi√ßos** - Comunica√ß√£o com API e processamento de dados
+3. **Componentes** - Interface do usu√°rio
+4. **Tipos** - Defini√ß√µes de tipos TypeScript
+
+### Fluxo de Dados
+
+O fluxo de dados da aplica√ß√£o segue o seguinte caminho:
+
+```
+[API Backend] <---> [Servi√ßos] <---> [Composables] <---> [Componentes UI]
 ```
 
-### Compile and Hot-Reload for Development
+### Estrutura de Arquivos
 
-```sh
-npm run dev
 ```
+src/
+‚îú‚îÄ‚îÄ app/                 # L√≥gica da aplica√ß√£o
+‚îÇ   ‚îú‚îÄ‚îÄ composables/     # Hooks reutiliz√°veis
+‚îÇ   ‚îú‚îÄ‚îÄ config/          # Configura√ß√µes
+‚îÇ   ‚îú‚îÄ‚îÄ services/        # Servi√ßos (API, etc)
+‚îÇ   ‚îú‚îÄ‚îÄ types/           # Defini√ß√µes de tipos
+‚îÇ   ‚îú‚îÄ‚îÄ utils/           # Utilit√°rios
+‚îÇ   ‚îî‚îÄ‚îÄ styles/          # Estilos globais
+‚îú‚îÄ‚îÄ components/          # Componentes da UI
+‚îÇ   ‚îú‚îÄ‚îÄ data-table/      # Componentes da tabela de dados
+‚îÇ   ‚îî‚îÄ‚îÄ ui/              # Componentes UI b√°sicos
+‚îú‚îÄ‚îÄ lib/                 # Bibliotecas/utilit√°rios
+‚îî‚îÄ‚îÄ App.vue              # Componente raiz
+```
+
+## Integra√ß√£o com API
+
+A aplica√ß√£o se integra com uma API RESTful para buscar dados de operadoras. Os principais par√¢metros suportados s√£o:
+
+- `query` - Texto de busca (m√≠nimo 2 caracteres)
+- `page` - N√∫mero da p√°gina (come√ßa em 1)
+- `page_size` - Quantidade de resultados por p√°gina
+- `order_by` - Campo para ordena√ß√£o
+- `order_direction` - Dire√ß√£o da ordena√ß√£o (`asc` ou `desc`)
+
+## Tipos e Enums
+
+O sistema utiliza TypeScript com tipos fortemente definidos:
+
+- `ApiField` - Enum para campos da API
+- `FrontendField` - Enum para campos do frontend
+- `SortDirection` - Enum para dire√ß√µes de ordena√ß√£o
+- `ApiOperator` - Interface para dados da operadora da API
+- `OperatorRecord` - Interface para dados da operadora no frontend
+
+## Funcionalidades Principais
+
+### DataTable
+
+Componente principal que orquestra a exibi√ß√£o de dados tabulares com:
+
+- Cabe√ßalhos clic√°veis para ordena√ß√£o
+- Pagina√ß√£o com navega√ß√£o intuitiva
+- Campo de busca para filtrar dados
+- Indicadores de carregamento
+- Estados vazios para resultados n√£o encontrados
+
+### Ordena√ß√£o
+
+Sistema de ordena√ß√£o que:
+
+- Alterna entre ordena√ß√£o ascendente e descendente
+- Sincroniza estado com a API
+- Exibe indicadores visuais da ordena√ß√£o atual
+
+### Busca
+
+Campo de busca inteligente que:
+
+- Implementa debounce para reduzir chamadas √† API
+- Valida comprimento m√≠nimo da busca
+- Exibe feedback visual durante a busca
 
-### Type-Check, Compile and Minify for Production
+## Configura√ß√£o do Projeto
+
+### Requisitos
+
+- Node.js 16+
+- npm ou yarn
+
+### Instala√ß√£o
 
 ```sh
+# Instalar depend√™ncias
+npm install
+
+# Compilar e iniciar servidor de desenvolvimento
+npm run dev
+
+# Verificar tipos, compilar e minificar para produ√ß√£o
 npm run build
+
+# Executar linter
+npm run lint
 ```
 
-### Lint with [ESLint](https://eslint.org/)
+### Vari√°veis de Ambiente
+
+Crie um arquivo `.env.local` na raiz do projeto com as seguintes vari√°veis:
 
 ```sh
-npm run lint
+VITE_API_URL=http://sua-api-url.com
 ```
+
+## Componentes UI
+
+### Table
+
+Componente de tabela altamente personaliz√°vel com:
+
+- `TableHeader` - Cabe√ßalho da tabela
+- `TableBody` - Corpo da tabela
+- `TableRow` - Linha da tabela
+- `TableCell` - C√©lula da tabela
+- `TableHead` - C√©lula de cabe√ßalho
+
+### TableControls
+
+Barra de controles com:
+
+- Campo de busca
+- Bot√£o de atualiza√ß√£o
+- Indicador de carregamento
+
+### PaginationControls
+
+Controles de pagina√ß√£o com:
+
+- Navega√ß√£o por p√°ginas
+- Seletor de tamanho de p√°gina
+- Indicador de resultados
+
+## Contribui√ß√£o
+
+1. Fa√ßa um fork do projeto
+2. Crie uma branch para sua feature (`git checkout -b feature/nova-feature`)
+3. Fa√ßa commit das altera√ß√µes (`git commit -m 'Adiciona nova feature'`)
+4. Fa√ßa push para a branch (`git push origin feature/nova-feature`)
+5. Abra um Pull Request
+
+## Licen√ßa
+
+[MIT](LICENSE.md)
diff --git a/package-lock.json b/package-lock.json
index 37c64d1..1b7b476 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -16,6 +16,7 @@
         "clsx": "^2.1.1",
         "lucide-vue-next": "^0.484.0",
         "reka-ui": "^2.1.1",
+        "swrv": "^1.1.0",
         "tailwind-merge": "^3.0.2",
         "vue": "^3.5.13"
       },
@@ -6225,6 +6226,15 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/swrv": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/swrv/-/swrv-1.1.0.tgz",
+      "integrity": "sha512-pjllRDr2s0iTwiE5Isvip51dZGR7GjLH1gCSVyE8bQnbAx6xackXsFdojau+1O5u98yHF5V73HQGOFxKUXO9gQ==",
+      "license": "Apache-2.0",
+      "peerDependencies": {
+        "vue": ">=3.2.26 < 4"
+      }
+    },
     "node_modules/synckit": {
       "version": "0.10.3",
       "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.10.3.tgz",
diff --git a/package.json b/package.json
index de10904..466e1cd 100644
--- a/package.json
+++ b/package.json
@@ -23,6 +23,7 @@
     "clsx": "^2.1.1",
     "lucide-vue-next": "^0.484.0",
     "reka-ui": "^2.1.1",
+    "swrv": "^1.1.0",
     "tailwind-merge": "^3.0.2",
     "vue": "^3.5.13"
   },
diff --git a/src/App.vue b/src/App.vue
index 9a550d6..169cb4f 100644
--- a/src/App.vue
+++ b/src/App.vue
@@ -1,8 +1,7 @@
 <script setup lang="ts">
 import { onMounted } from 'vue'
-import DataTable from "@/components/data-table/DataTable.vue";
+import DataTable from '@/components/data-table/DataTable.vue'
 import { columns } from '@/app/utils/columns'
-import { fetchOperators } from '@/app/services/operatorService'
 
 onMounted(() => {
   document.body.className = 'antialiased dark bg-black'
@@ -18,19 +17,18 @@ onMounted(() => {
           Visualize e pesquise operadores do sistema com facilidade
         </p>
       </header>
-      
+
       <div class="relative z-10 flex-grow mb-6 w-full">
-        <div class="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-2xl blur-3xl opacity-50 -z-10"></div>
-        <div class="bg-black/20 backdrop-blur-xl p-6 rounded-2xl border border-white/10 shadow-2xl h-full flex flex-col w-full">
-          <DataTable 
-            :fetch-fn="fetchOperators"
-            :columns="columns"
-            persist-key="operator-table"
-            :default-page-size="10"
-          />
+        <div
+          class="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-2xl blur-3xl opacity-50 -z-10"
+        ></div>
+        <div
+          class="bg-black/20 backdrop-blur-xl p-6 rounded-2xl border border-white/10 shadow-2xl h-full flex flex-col w-full"
+        >
+          <DataTable :columns="columns" persist-key="operator-table" :default-page-size="10" />
         </div>
       </div>
-      
+
       <footer class="mt-4 text-center text-white/40 text-sm font-light w-full">
         <p>Sistema de Cadastro de Operadores &copy; {{ new Date().getFullYear() }}</p>
       </footer>
@@ -63,5 +61,3 @@ onMounted(() => {
   background: rgba(255, 255, 255, 0.4);
 }
 </style>
-
-
diff --git a/src/app/composables/index.ts b/src/app/composables/index.ts
index 7319195..39923f6 100644
--- a/src/app/composables/index.ts
+++ b/src/app/composables/index.ts
@@ -1,6 +1,5 @@
-export * from './useApiCache';
+export * from './useSwrvCache.ts';
 export * from './useDataTable';
-export * from './useFetchWithAbort';
 export * from './usePagination';
 export * from './useSearch';
 export * from './useSorting';
diff --git a/src/app/composables/useDataTable.ts b/src/app/composables/useDataTable.ts
index 493db2a..58ab6a2 100644
--- a/src/app/composables/useDataTable.ts
+++ b/src/app/composables/useDataTable.ts
@@ -1,152 +1,245 @@
 import { ref, computed, watch } from 'vue'
-import type { Ref } from 'vue'
-import { useSorting } from './useSorting'
-import { usePagination } from './usePagination'
-import { useSearch } from './useSearch'
-import { useTableColumns, type ColumnDefinition } from './useTableColumns'
-import { useFetchWithAbort } from './useFetchWithAbort'
-
-export interface DataTableOptions<T> {
-  columns: ColumnDefinition[]
-  persistKey?: string
-  defaultPageSize?: number
-  searchDebounce?: number
-  fetchFn: (params: any, signal: AbortSignal) => Promise<{
-    items: T[]
-    total: number
-  }>
-}
+import { useDebounceFn } from '@vueuse/core'
+import {
+  useSwrvCache,
+  useTableColumns,
+  useSearch,
+  usePagination,
+  useSorting,
+} from '@/app/composables'
+import {
+  type DataTableOptions,
+  type FetchOperatorsParams,
+  type PaginatedResponse,
+  SortableFields,
+  SortDirection,
+} from '@/app/types'
+import { API_CONFIG } from '@/app/config/api.ts'
+import { errorHandler } from '@/app/utils/exceptionHandler'
 
-export function useDataTable<T = any>(options: DataTableOptions<T>) {
+export function useDataTable<T extends Record<string, unknown>>(options: DataTableOptions<T>) {
   const {
     columns: initialColumns,
     persistKey,
     defaultPageSize = 10,
-    searchDebounce = 500,
-    fetchFn
+    globalDebounce = 1500,
   } = options
 
-  // Gerenciamento de colunas
-  const { 
-    columns, 
-    visibleColumns, 
-    toggleColumnVisibility, 
-    isColumnVisible,
-    resetColumns
-  } = useTableColumns({ 
-    persistKey, 
-    initialColumns 
-  })
+  const { columns, visibleColumns, toggleColumnVisibility, isColumnVisible, resetColumns } =
+    useTableColumns({
+      persistKey,
+      initialColumns,
+    })
 
-  // Gerenciamento de ordena√ß√£o (sorting)
-  const { 
-    sortConfig, 
-    handleSorting, 
-    sortParam 
+  const {
+    sortParams,
+    handleSortFieldChange: rawHandleSortFieldChange,
+    handleSortDirectionChange: rawHandleSortDirectionChange,
+    toggleSortDirection: rawToggleSortDirection,
   } = useSorting()
 
-  // Gerenciamento de pagina√ß√£o
-  const { 
-    pagination, 
-    handlePageChange, 
-    handlePageSizeChange, 
-    updatePaginationInfo, 
-    resetPage 
+  const handleSortFieldChange = (field: SortableFields) => {
+    try {
+      rawHandleSortFieldChange(field)
+    } catch (error) {
+      errorHandler.handle(error, 'Altera√ß√£o de campo de ordena√ß√£o')
+    }
+  }
+
+  const handleSortDirectionChange = (order: SortDirection) => {
+    try {
+      rawHandleSortDirectionChange(order)
+    } catch (error) {
+      errorHandler.handle(error, 'Altera√ß√£o de dire√ß√£o de ordena√ß√£o')
+    }
+  }
+
+  // Nova fun√ß√£o para alternar a dire√ß√£o de ordena√ß√£o
+  const toggleSortDirection = () => {
+    try {
+      console.log('Alternando dire√ß√£o de ordena√ß√£o')
+      rawToggleSortDirection()
+    } catch (error) {
+      errorHandler.handle(error, 'Altern√¢ncia de dire√ß√£o de ordena√ß√£o')
+    }
+  }
+
+  const {
+    pagination,
+    handlePageChange: rawHandlePageChange,
+    handlePageSizeChange: rawHandlePageSizeChange,
+    updatePaginationInfo,
+    resetPage,
   } = usePagination(1, defaultPageSize)
 
-  // Gerenciamento de busca
-  const { 
-    searchTerm, 
-    debouncedSearchTerm, 
-    isSearching, 
-    handleSearch, 
-    clearSearch, 
-    dispose: disposeSearch 
-  } = useSearch({ 
-    debounceDelay: searchDebounce,
-    onSearch: () => resetPage()
+  const handlePageChange = (page: number) => {
+    try {
+      rawHandlePageChange(page)
+    } catch (error) {
+      errorHandler.handle(error, 'Mudan√ßa de p√°gina')
+    }
+  }
+
+  const handlePageSizeChange = (size: number) => {
+    try {
+      rawHandlePageSizeChange(size)
+    } catch (error) {
+      errorHandler.handle(error, 'Altera√ß√£o de itens por p√°gina')
+    }
+  }
+
+  const { searchTerm, handleSearch, clearSearch } = useSearch({
+    onSearch: () => resetPage(),
+    minLength: 2,
   })
 
-  // Estado para controlar os registros
   const items = ref<T[]>([])
-  const isEmpty = computed(() => items.value.length === 0)
-
-  // Par√¢metros para a requisi√ß√£o
-  const fetchParams = computed(() => {
-    return {
-      page: pagination.value.page,
-      pageSize: pagination.value.pageSize,
-      search: searchTerm.value,
-      sort: sortParam.value
+  const isEmpty = computed(() => !items.value || items.value.length === 0)
+  const total = ref(0)
+  const error = ref<Error | null>(null)
+  const debouncingRequest = ref(false)
+
+  const fetchParams = computed<FetchOperatorsParams>(() => ({
+    page: pagination.value.page,
+    pageSize: pagination.value.pageSize,
+    search: searchTerm.value,
+    sortField: sortParams.value.sortField,
+    sortDirection: sortParams.value.sortDirection,
+  }))
+
+  const actualFetchParams = ref<FetchOperatorsParams>(fetchParams.value)
+
+  const updateAndRefresh = useDebounceFn(async (newParams: FetchOperatorsParams) => {
+    const newParamsString = JSON.stringify(newParams)
+    const currentParamsString = JSON.stringify(actualFetchParams.value)
+    if (newParamsString !== currentParamsString) {
+      actualFetchParams.value = newParams
+      await refresh()
+      debouncingRequest.value = false
     }
-  })
+  }, globalDebounce)
 
-  // Fetch de dados usando o abort controller
-  const { 
-    isLoading,
-    error: fetchError,
-    execute: executeFetch,
-    abort: abortFetch
-  } = useFetchWithAbort<{ items: T[], total: number }>(
-    (signal) => fetchFn(fetchParams.value, signal),
-    {
-      onSuccess: (result) => {
-        items.value = result.items
-        updatePaginationInfo(
-          result.total, 
-          Math.ceil(result.total / pagination.value.pageSize)
-        )
+  watch(
+    sortParams,
+    (newValue, oldValue) => {
+      console.log('sortParams mudou de', oldValue, 'para', newValue)
+    },
+    { deep: true, immediate: true },
+  )
+
+  watch(
+    fetchParams,
+    async (newParams, oldParams) => {
+      const newParamsString = JSON.stringify(newParams)
+      const oldParamsString = JSON.stringify(oldParams)
+      if (newParamsString !== oldParamsString) {
+        debouncingRequest.value = true
+        await updateAndRefresh(newParams)
       }
-    }
+    },
+    { deep: true },
   )
 
-  // Atualizar dados quando os par√¢metros mudarem
-  watch(fetchParams, () => {
-    executeFetch()
-  }, { deep: true })
+  const filteredFetchParams = computed(() => {
+    const params = actualFetchParams.value;
+    return Object.fromEntries(
+      Object.entries(params).filter(([_, value]) => value !== null && value !== undefined && value !== '')
+    );
+  });
 
-  // Fun√ß√£o para atualizar dados manualmente
-  const refresh = () => {
-    return executeFetch()
-  }
+  const {
+    data: response,
+    isLoading: isLoadingFetch,
+    refresh: rawRefresh,
+    error: apiError,
+  } = useSwrvCache<PaginatedResponse<T>>(API_CONFIG.ENDPOINTS.OPERATORS, filteredFetchParams)
 
-  // Fun√ß√£o para limpar tudo e resetar
-  const reset = () => {
-    clearSearch()
-    resetPage()
-    refresh()
-  }
+  const refresh = errorHandler.withErrorHandling(async () => {
+    error.value = null
+    return await rawRefresh()
+  }, 'Atualiza√ß√£o de dados')
 
-  // Limpeza ao desmontar
-  const dispose = () => {
-    disposeSearch()
-    abortFetch()
+  // Observa erros da API
+  watch(
+    apiError,
+    (newError) => {
+      if (newError) {
+        console.error('Erro ao carregar dados:', newError)
+        error.value = newError
+        errorHandler.handle(newError, 'Carregamento de dados')
+      }
+    },
+    { immediate: true },
+  )
+
+  // Observa respostas da API
+  watch(
+    response,
+    (dataResponse) => {
+      try {
+        if (dataResponse) {
+          console.log('dataResponse', dataResponse)
+          const responseData = dataResponse.data as unknown as PaginatedResponse<T>
+          items.value = responseData.data
+          total.value = responseData.totalItems
+          updatePaginationInfo(responseData.totalItems, Number(responseData.totalPages))
+        }
+      } catch (err) {
+        errorHandler.handle(err, 'Processamento de resposta')
+      }
+    },
+    { immediate: true }
+  )
+
+  const reset = async () => {
+    try {
+      clearSearch()
+      resetPage()
+      actualFetchParams.value = fetchParams.value
+      await refresh()
+    } catch (err) {
+      errorHandler.handle(err, 'Reset de dados')
+    }
   }
 
+  const maxPage = computed(() => pagination.value.totalPages)
+  const displayRange = computed(() => {
+    try {
+      const start = (pagination.value.page - 1) * pagination.value.pageSize + 1
+      const end = Math.min(pagination.value.page * pagination.value.pageSize, total.value)
+      return { start, end }
+    } catch (err) {
+      errorHandler.handle(err, 'C√°lculo de intervalo')
+      return { start: 0, end: 0 }
+    }
+  })
+
   return {
-    // Estados
     items,
     columns,
     visibleColumns,
     isEmpty,
-    isLoading,
-    isSearching,
-    fetchError,
-    searchTerm: debouncedSearchTerm,
+    isLoading: computed(() => isLoadingFetch.value || debouncingRequest.value),
+    searchTerm,
     pagination,
-    sortConfig,
+    sortParams,
+    total,
+    maxPage,
+    displayRange,
+    error,
 
-    // A√ß√µes
     toggleColumnVisibility,
     isColumnVisible,
     resetColumns,
-    handleSort: handleSorting,
     handlePageChange,
     handlePageSizeChange,
     handleSearch,
     clearSearch,
     refresh,
     reset,
-    dispose
+
+    handleSortFieldChange,
+    handleSortDirectionChange: handleSortDirectionChange,
+    toggleSortDirection: toggleSortDirection,
   }
-} 
\ No newline at end of file
+}
diff --git a/src/app/composables/usePagination.ts b/src/app/composables/usePagination.ts
index 5fc46eb..b7e40dc 100644
--- a/src/app/composables/usePagination.ts
+++ b/src/app/composables/usePagination.ts
@@ -1,18 +1,11 @@
-import { ref, computed } from 'vue'
-import type { Ref } from 'vue'
-
-export interface PaginationState {
-  page: number
-  pageSize: number
-  total: number
-  totalPages: number
-}
+import { ref } from 'vue'
+import type { PaginationState } from '@/app/types'
 
 export function usePagination(
   defaultPage: number = 1,
   defaultPageSize: number = 10
 ) {
-  // Estado da pagina√ß√£o
+
   const pagination = ref<PaginationState>({
     page: defaultPage,
     pageSize: defaultPageSize,
@@ -20,7 +13,6 @@ export function usePagination(
     totalPages: 0
   })
 
-  // Handlers para mudan√ßas de p√°gina
   const handlePageChange = (page: number) => {
     if (pagination.value.page === page) return false
     pagination.value = { ...pagination.value, page }
@@ -33,21 +25,13 @@ export function usePagination(
     return true
   }
 
-  // Atualizar informa√ß√µes da pagina√ß√£o
   const updatePaginationInfo = (total: number, totalPages: number) => {
-    pagination.value = {
-      ...pagination.value,
-      total,
-      totalPages
-    }
+    pagination.value.total = total
+    pagination.value.totalPages = totalPages
   }
 
-  // Resetar pagina√ß√£o para p√°gina 1
   const resetPage = () => {
-    pagination.value = {
-      ...pagination.value,
-      page: 1
-    }
+    pagination.value.page = 1
   }
 
   return {
@@ -57,4 +41,4 @@ export function usePagination(
     updatePaginationInfo,
     resetPage
   }
-} 
\ No newline at end of file
+}
diff --git a/src/app/composables/useSearch.ts b/src/app/composables/useSearch.ts
index a38eb01..c19edfd 100644
--- a/src/app/composables/useSearch.ts
+++ b/src/app/composables/useSearch.ts
@@ -1,85 +1,55 @@
 import { ref } from 'vue'
-import type { Ref } from 'vue'
+import { useToast } from '@/app/composables/useToast'
 
 export interface SearchOptions {
-  debounceDelay?: number
-  onSearch?: (term: string) => void
+  onSearch?: (value: string) => void
+  minLength?: number
 }
 
 export function useSearch(options: SearchOptions = {}) {
-  const { 
-    debounceDelay = 500,
-    onSearch
-  } = options
+  const { onSearch, minLength = 2 } = options
 
-  // Estados
+  const toast = useToast()
   const searchTerm = ref('')
-  const debouncedSearchTerm = ref('')
   const isSearching = ref(false)
-  
-  // Timeout para debounce
-  let debounceTimeout: number | null = null
 
-  // Limpar timeout de debounce se existir
-  const clearDebounceTimeout = () => {
-    if (debounceTimeout) {
-      clearTimeout(debounceTimeout)
-      debounceTimeout = null
+  const search = (value: string) => {
+    try {
+      if (onSearch && (value === '' || value.length >= minLength)) {
+        onSearch(value)
+      }
+    } catch (error) {
+      toast.error(
+        'Erro na busca',
+        'Ocorreu um erro ao processar a busca. Tente novamente com outros termos.',
+      )
+    } finally {
+      isSearching.value = false
     }
   }
 
-  // Fun√ß√£o principal de busca com debounce
-  const handleSearch = (term: string) => {
-    // Atualiza o termo sendo exibido imediatamente para feedback
-    debouncedSearchTerm.value = term
-    
-    // Indica que a busca est√° em andamento para feedback visual
+  const handleSearch = (value: string) => {
+    if (value.length > 0 && value.length < minLength) {
+      toast.info(
+        'Termo de busca curto',
+        `Digite pelo menos ${minLength} caracteres para realizar a busca.`,
+      )
+      return
+    }
+
     isSearching.value = true
-    
-    // Cancela o temporizador anterior se existir
-    clearDebounceTimeout()
-    
-    // Configura novo temporizador
-    debounceTimeout = window.setTimeout(() => {
-      // Verifica se o termo mudou para evitar buscas desnecess√°rias
-      if (searchTerm.value === term) {
-        isSearching.value = false
-        return
-      }
-      
-      // Atualiza o termo de busca
-      searchTerm.value = term
-      
-      // Executa o callback de busca, se fornecido
-      if (onSearch) {
-        onSearch(term)
-      }
-      
-      // Fim da busca
-      debounceTimeout = null
-      isSearching.value = false
-    }, debounceDelay)
+    searchTerm.value = value
+    search(value)
   }
 
-  // Limpar busca
   const clearSearch = () => {
-    clearDebounceTimeout()
     searchTerm.value = ''
-    debouncedSearchTerm.value = ''
-    isSearching.value = false
-  }
-
-  // Limpeza de recursos
-  const dispose = () => {
-    clearDebounceTimeout()
   }
 
   return {
     searchTerm,
-    debouncedSearchTerm,
     isSearching,
     handleSearch,
     clearSearch,
-    dispose
   }
-} 
\ No newline at end of file
+}
diff --git a/src/app/composables/useSorting.ts b/src/app/composables/useSorting.ts
index c073c9e..88a6c73 100644
--- a/src/app/composables/useSorting.ts
+++ b/src/app/composables/useSorting.ts
@@ -1,45 +1,50 @@
 import { ref, computed } from 'vue'
-import type { Ref } from 'vue'
+import {SortDirection, SortableFields, type SortConfig } from '@/app/types'
 
-export interface SortConfig {
-  field: string
-  order: 'asc' | 'desc'
-}
-
-export function useSorting(defaultField: string = 'id', defaultOrder: 'asc' | 'desc' = 'asc') {
-  // Estado da ordena√ß√£o
+export function useSorting() {
   const sortConfig = ref<SortConfig>({
-    field: defaultField,
-    order: defaultOrder
+    order: null,
+    field: null,
   })
 
-  // Handlers para ordena√ß√£o
-  const handleSorting = (field: string) => {
-    let order: 'asc' | 'desc' = 'asc'
-    
-    if (sortConfig.value.field === field) {
-      // Inverter a ordem se o campo j√° est√° selecionado
-      order = sortConfig.value.order === 'asc' ? 'desc' : 'asc'
-    }
-    
-    // Atualizar apenas se algo mudou
-    if (sortConfig.value.field !== field || sortConfig.value.order !== order) {
-      sortConfig.value = { field, order }
+  const sortParams = computed(() => { return {
+    sortField: sortConfig.value.field,
+    sortDirection: sortConfig.value.order,}
+  })
+
+  const handleSortFieldChange = (field: SortableFields) => {
+    if (sortConfig.value.field !== field) {
+      sortConfig.value.field = field
       return true
     }
+    return false
+  }
 
+  const handleSortDirectionChange = (order: SortDirection) => {
+    if (sortConfig.value.order !== order) {
+      sortConfig.value.order = order
+      return true
+    }
     return false
   }
 
-  // Computar o par√¢metro de ordena√ß√£o para a API
-  const sortParam = computed(() => {
-    const { field, order } = sortConfig.value
-    return order === 'desc' ? `-${field}` : field
-  })
+  const toggleSortDirection = () => {
+    const newOrder =
+      sortConfig.value.order === SortDirection.ASC ? SortDirection.DESC : SortDirection.ASC
+    return handleSortDirectionChange(newOrder)
+  }
+
+  const setSortFromApi = (field: SortableFields, order: SortDirection) => {
+    if (field && (field !== sortConfig.value.field || order !== sortConfig.value.order)) {
+      sortConfig.value = { field, order }
+    }
+  }
 
   return {
-    sortConfig,
-    handleSorting,
-    sortParam
+    setSortFromApi,
+    sortParams,
+    handleSortFieldChange,
+    handleSortDirectionChange: handleSortDirectionChange,
+    toggleSortDirection: toggleSortDirection,
   }
-} 
\ No newline at end of file
+}
diff --git a/src/app/composables/useTableColumns.ts b/src/app/composables/useTableColumns.ts
index 2375bf8..66462d1 100644
--- a/src/app/composables/useTableColumns.ts
+++ b/src/app/composables/useTableColumns.ts
@@ -1,98 +1,69 @@
 import { ref, computed } from 'vue'
-import type { Ref } from 'vue'
-
-export interface ColumnDefinition {
-  id: string
-  title: string
-  sortable?: boolean
-  visible?: boolean
-  formatter?: (value: any) => string
-  width?: string
-}
-
-export interface TableColumnOptions {
-  persistKey?: string
-  initialColumns: ColumnDefinition[]
-}
+import type { ColumnDefinition, TableColumnOptions } from '@/app/types'
 
 export function useTableColumns(options: TableColumnOptions) {
-  const { 
-    persistKey,
-    initialColumns = []
-  } = options
-
-  // Tenta carregar colunas do localStorage se persistKey fornecido
+  const { persistKey, initialColumns = [] } = options
   const loadSavedColumns = (): ColumnDefinition[] => {
     if (!persistKey) return initialColumns
-    
+
     try {
       const savedConfig = localStorage.getItem(`table-columns-${persistKey}`)
       if (savedConfig) {
         const savedVisibility = JSON.parse(savedConfig)
-        
-        // Mesclar as configura√ß√µes salvas com as colunas iniciais
-        return initialColumns.map(col => ({
+        return initialColumns.map((col) => ({
           ...col,
-          visible: savedVisibility[col.id] !== undefined ? savedVisibility[col.id] : col.visible
+          visible: savedVisibility[col.id] !== undefined ? savedVisibility[col.id] : col.visible,
         }))
       }
     } catch (error) {
       console.error('Erro ao carregar configura√ß√£o de colunas:', error)
     }
-    
+
     return initialColumns
   }
 
-  // Inicializar as colunas
   const columns = ref<ColumnDefinition[]>(loadSavedColumns())
+  const visibleColumns = computed(() => columns.value.filter((col) => col.visible !== false))
 
-  // Obter apenas colunas vis√≠veis
-  const visibleColumns = computed(() => 
-    columns.value.filter(col => col.visible !== false)
-  )
-
-  // Salvar configura√ß√£o de visibilidade
   const saveColumnVisibility = () => {
     if (!persistKey) return
-    
+
     try {
-      // Salvar apenas um mapa de visibilidade por ID
-      const visibilityMap = columns.value.reduce((map, col) => {
-        map[col.id] = col.visible !== false
-        return map
-      }, {} as Record<string, boolean>)
-      
+      const visibilityMap = columns.value.reduce(
+        (map, col) => {
+          map[col.id] = col.visible !== false
+          return map
+        },
+        {} as Record<string, boolean>,
+      )
+
       localStorage.setItem(`table-columns-${persistKey}`, JSON.stringify(visibilityMap))
     } catch (error) {
       console.error('Erro ao salvar configura√ß√£o de colunas:', error)
     }
   }
 
-  // Alternar visibilidade de uma coluna
   const toggleColumnVisibility = (columnId: string) => {
-    const index = columns.value.findIndex(col => col.id === columnId)
+    const index = columns.value.findIndex((col) => col.id === columnId)
     if (index === -1) return
-    
-    // Criar nova refer√™ncia para o array para garantir reatividade
+
     const newColumns = [...columns.value]
     newColumns[index] = {
       ...newColumns[index],
-      visible: newColumns[index].visible === false
+      visible: newColumns[index].visible === false,
     }
-    
+
     columns.value = newColumns
     saveColumnVisibility()
   }
 
-  // Restaurar configura√ß√£o de colunas para o padr√£o inicial
   const resetColumns = () => {
     columns.value = initialColumns
     saveColumnVisibility()
   }
 
-  // Verificar se uma coluna est√° vis√≠vel
   const isColumnVisible = (columnId: string) => {
-    const column = columns.value.find(col => col.id === columnId)
+    const column = columns.value.find((col) => col.id === columnId)
     return column ? column.visible !== false : false
   }
 
@@ -101,6 +72,6 @@ export function useTableColumns(options: TableColumnOptions) {
     visibleColumns,
     toggleColumnVisibility,
     isColumnVisible,
-    resetColumns
+    resetColumns,
   }
-} 
\ No newline at end of file
+}
diff --git a/src/app/composables/useToast.ts b/src/app/composables/useToast.ts
index bc4483f..2404505 100644
--- a/src/app/composables/useToast.ts
+++ b/src/app/composables/useToast.ts
@@ -1,105 +1,98 @@
-import { ref, markRaw, h, render, type Component } from 'vue';
-import Toast from '@/components/ui/toast.vue';
+import { ref, markRaw, h, render } from 'vue'
+import Toast from '@/components/ui/toast.vue'
 
 interface ToastOptions {
-  title: string;
-  message?: string;
-  type?: 'success' | 'error' | 'warning' | 'info';
-  duration?: number;
+  title: string
+  message?: string
+  type?: 'success' | 'error' | 'warning' | 'info'
+  duration?: number
 }
 
-const toastQueue = ref<ToastOptions[]>([]);
-
-// Criar um container para os toasts se ainda n√£o existir
-let toastContainer: HTMLDivElement | null = null;
+const toastQueue = ref<ToastOptions[]>([])
+let toastContainer: HTMLDivElement | null = null
 
+// Fun√ß√£o para criar o container de toasts (apenas uma vez)
 const createToastContainer = () => {
   if (!toastContainer) {
-    toastContainer = document.createElement('div');
-    toastContainer.id = 'toast-container';
-    toastContainer.style.position = 'fixed';
-    toastContainer.style.top = '1rem';
-    toastContainer.style.right = '1rem';
-    toastContainer.style.zIndex = '9999';
-    toastContainer.style.display = 'flex';
-    toastContainer.style.flexDirection = 'column';
-    toastContainer.style.gap = '0.5rem';
-    toastContainer.style.maxWidth = '384px'; // w-96
-    document.body.appendChild(toastContainer);
+    toastContainer = document.createElement('div')
+    toastContainer.id = 'toast-container'
+    toastContainer.style.position = 'fixed'
+    toastContainer.style.top = '1rem'
+    toastContainer.style.right = '1rem'
+    toastContainer.style.zIndex = '9999'
+    toastContainer.style.display = 'flex'
+    toastContainer.style.flexDirection = 'column'
+    toastContainer.style.gap = '0.5rem'
+    toastContainer.style.maxWidth = '384px' // w-96
+    document.body.appendChild(toastContainer)
   }
-  return toastContainer;
-};
+  return toastContainer
+}
 
+// Fun√ß√£o para remover um toast da fila
 const removeToast = (index: number) => {
-  toastQueue.value.splice(index, 1);
-};
+  toastQueue.value.splice(index, 1)
+}
 
 // Fun√ß√£o principal para exibir um toast
 const showToast = (options: ToastOptions) => {
-  const container = createToastContainer();
-  
-  // Adicionar √† fila
-  toastQueue.value.push(options);
-  
-  // Criar o elemento DOM para o toast
-  const toastId = `toast-${Date.now()}`;
-  const toastElement = document.createElement('div');
-  toastElement.id = toastId;
-  toastElement.style.width = '100%';
-  toastElement.style.transition = 'all 0.3s ease';
-  container.appendChild(toastElement);
-  
+  const container = createToastContainer()
+
+  toastQueue.value.push(options)
+
+  const toastId = `toast-${Date.now()}`
+  const toastElement = document.createElement('div')
+  toastElement.id = toastId
+  toastElement.style.width = '100%'
+  toastElement.style.transition = 'all 0.3s ease'
+  container.appendChild(toastElement)
+
   // Criar o componente Vue
   const toastVNode = h(markRaw(Toast), {
     ...options,
     onClose: () => {
-      // Remover o toast do DOM e da fila
-      const index = toastQueue.value.findIndex(toast => toast === options);
+      const index = toastQueue.value.findIndex((toast) => toast === options)
       if (index !== -1) {
-        removeToast(index);
+        removeToast(index)
       }
-      
-      // Remover o elemento do DOM ap√≥s a anima√ß√£o
+
       setTimeout(() => {
         if (toastElement.parentNode) {
-          toastElement.parentNode.removeChild(toastElement);
+          toastElement.parentNode.removeChild(toastElement)
         }
-      }, 300); // Tempo para a anima√ß√£o completar
-    }
-  });
-  
-  // Renderizar o componente
-  render(toastVNode, toastElement);
-  
-  // Auto-remover ap√≥s o tempo definido
+      }, 300)
+    },
+  })
+
+  render(toastVNode, toastElement)
+
   if (options.duration !== 0) {
     setTimeout(() => {
-      const index = toastQueue.value.findIndex(toast => toast === options);
+      const index = toastQueue.value.findIndex((toast) => toast === options)
       if (index !== -1) {
-        removeToast(index);
-        
-        // Remover o elemento do DOM ap√≥s a anima√ß√£o
+        removeToast(index)
+
         setTimeout(() => {
           if (toastElement.parentNode) {
-            toastElement.parentNode.removeChild(toastElement);
+            toastElement.parentNode.removeChild(toastElement)
           }
-        }, 300);
+        }, 300)
       }
-    }, options.duration || 5000);
+    }, options.duration || 5000)
   }
-};
+}
 
-// Exportar vers√µes espec√≠ficas para facilitar o uso
+// Exportar o composable
 export function useToast() {
   return {
     show: showToast,
-    success: (title: string, message?: string, duration?: number) => 
+    success: (title: string, message?: string, duration?: number) =>
       showToast({ title, message, type: 'success', duration }),
-    error: (title: string, message?: string, duration?: number) => 
+    error: (title: string, message?: string, duration?: number) =>
       showToast({ title, message, type: 'error', duration }),
-    warning: (title: string, message?: string, duration?: number) => 
+    warning: (title: string, message?: string, duration?: number) =>
       showToast({ title, message, type: 'warning', duration }),
-    info: (title: string, message?: string, duration?: number) => 
+    info: (title: string, message?: string, duration?: number) =>
       showToast({ title, message, type: 'info', duration }),
-  };
-} 
\ No newline at end of file
+  }
+}
diff --git a/src/app/composables/useVisibleColumns.ts b/src/app/composables/useVisibleColumns.ts
index 44aa826..33e021f 100644
--- a/src/app/composables/useVisibleColumns.ts
+++ b/src/app/composables/useVisibleColumns.ts
@@ -23,7 +23,6 @@ export function useVisibleColumns(options: VisibleColumnsOptions = {}) {
     defaultColumns = []
   } = options
 
-  // Tenta carregar colunas do localStorage se persistKey fornecido
   const loadSavedColumns = (): Column[] => {
     if (!persistKey) return defaultColumns
     
@@ -31,9 +30,6 @@ export function useVisibleColumns(options: VisibleColumnsOptions = {}) {
       const saved = localStorage.getItem(`table-columns-${persistKey}`)
       if (saved) {
         const parsedColumns = JSON.parse(saved) as Column[]
-        
-        // Certifique-se de que todas as colunas padr√£o existam
-        // Isso √© √∫til quando novas colunas s√£o adicionadas ap√≥s a persist√™ncia
         const mergedColumns = [...parsedColumns]
         
         defaultColumns.forEach(defaultCol => {
@@ -53,15 +49,12 @@ export function useVisibleColumns(options: VisibleColumnsOptions = {}) {
     return defaultColumns
   }
 
-  // Inicializa as colunas
   const columns = ref<Column[]>(loadSavedColumns())
 
-  // Calcula as colunas vis√≠veis
   const visibleColumns = computed(() => 
     columns.value.filter(column => column.visible !== false)
   )
 
-  // Salva as configura√ß√µes de colunas
   const saveColumns = () => {
     if (!persistKey) return
     
@@ -72,32 +65,26 @@ export function useVisibleColumns(options: VisibleColumnsOptions = {}) {
     }
   }
 
-  // Alterna a visibilidade de uma coluna
   const toggleColumnVisibility = (key: string) => {
     const columnIndex = columns.value.findIndex(col => col.key === key)
     
     if (columnIndex !== -1) {
-      // Cria uma nova refer√™ncia para o objeto da coluna para manter a reatividade
       const updatedColumn = { ...columns.value[columnIndex] }
       updatedColumn.visible = updatedColumn.visible === false ? true : false
       
-      // Atualiza o array de colunas
       const updatedColumns = [...columns.value]
       updatedColumns[columnIndex] = updatedColumn
       columns.value = updatedColumns
       
-      // Persiste a altera√ß√£o
       saveColumns()
     }
   }
 
-  // Define colunas iniciais ou redefine para os valores padr√£o
   const setColumns = (newColumns: Column[]) => {
     columns.value = newColumns
     saveColumns()
   }
 
-  // Redefine para as colunas padr√£o
   const resetToDefault = () => {
     columns.value = defaultColumns
     saveColumns()
diff --git a/src/app/config/api.ts b/src/app/config/api.ts
index d4a3f14..693cc72 100644
--- a/src/app/config/api.ts
+++ b/src/app/config/api.ts
@@ -1,10 +1,12 @@
-// Configura√ß√µes relacionadas √† API
+import {SortableFields, SortDirection} from '@/app/types'
+
+const BASE_URL = import.meta.env.VITE_API_URL
 
 export const API_CONFIG = {
-  BASE_URL: 'http://localhost:8000',
+  BASE_URL: BASE_URL,
   ENDPOINTS: {
-    OPERATORS: '/operators',
-    OPERATOR_DETAIL: (id: number) => `/operators/${id}`,
+    OPERATORS: '/api/v1/operators',
+    OPERATOR_DETAIL: (id: number) => `/api/v1/operators?query=${id}&page_size=1`,
   },
   PAGINATION: {
     DEFAULT_PAGE: 1,
@@ -12,8 +14,8 @@ export const API_CONFIG = {
     PAGE_SIZE_OPTIONS: [10, 20, 30, 50, 100],
   },
   SORT: {
-    DEFAULT_FIELD: 'registration',
-    DEFAULT_ORDER: 'asc' as 'asc' | 'desc',
+    DEFAULT_FIELD: SortableFields,
+    DEFAULT_ORDER: SortDirection.DESC,
   },
-  TIMEOUT: 10000, // 10 segundos
-}; 
\ No newline at end of file
+  TIMEOUT: 10000,
+}
diff --git a/src/app/utils/columns.ts b/src/app/utils/columns.ts
index 00e96cf..70f3ec2 100644
--- a/src/app/utils/columns.ts
+++ b/src/app/utils/columns.ts
@@ -1,100 +1,100 @@
-import type { ColumnDefinition } from '@/app/composables/useTableColumns'
+import type { ColumnDefinition } from '@/app/types';
 
 export const columns: ColumnDefinition[] = [
   {
-    id: 'registration',
+    id: "operatorRegistry",
     title: 'Registro',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'cnpj',
+    id: "cnpj",
     title: 'CNPJ',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'businessName',
+    id: "corporateName",
     title: 'Raz√£o Social',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'tradeName',
+    id: "tradeName",
     title: 'Nome Fantasia',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'modality',
+    id: "modality",
     title: 'Modalidade',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'street',
+    id: "street",
     title: 'Rua',
     sortable: true,
-    visible: false
+    visible: false,
   },
   {
-    id: 'number',
+    id: "number",
     title: 'N√∫mero',
     sortable: false,
-    visible: false
+    visible: false,
   },
   {
-    id: 'complement',
+    id: "complement",
     title: 'Complemento',
     sortable: false,
-    visible: false
+    visible: false,
   },
   {
-    id: 'neighborhood',
+    id: "neighborhood",
     title: 'Bairro',
     sortable: true,
-    visible: false
+    visible: false,
   },
   {
-    id: 'city',
+    id: "city",
     title: 'Cidade',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'state',
+    id: "state",
     title: 'Estado',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'postalCode',
+    id: "zip",
     title: 'CEP',
     sortable: false,
-    visible: false
+    visible: false,
   },
   {
-    id: 'phone',
+    id: "phone",
     title: 'Telefone',
     sortable: false,
-    visible: true
+    visible: true,
   },
   {
-    id: 'email',
+    id: "email",
     title: 'Email',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'representative',
+    id: "representative",
     title: 'Representante',
     sortable: true,
-    visible: true
+    visible: true,
   },
   {
-    id: 'registrationDate',
+    id: "registrationDate",
     title: 'Data de Registro',
     sortable: true,
-    visible: true
-  }
-]
+    visible: true,
+  },
+];
diff --git a/src/components/data-table/DataTable.vue b/src/components/data-table/DataTable.vue
index 46cda49..c9ef6de 100644
--- a/src/components/data-table/DataTable.vue
+++ b/src/components/data-table/DataTable.vue
@@ -1,105 +1,81 @@
 <template>
-  <div class="w-full">
-    <TableControls 
-      :loading="isLoading" 
-      :search-term="searchTerm" 
-      @search="handleSearch" 
-      @update="refresh" 
+  <div>
+    <TableControls
+      v-model:search="searchTerm"
+      :is-searching="isLoading"
+      :is-loading="isLoading"
+      @refresh="refresh"
+      @search="handleSearch"
     />
 
     <TableContainer>
       <Table>
-        <template #header>
-          <TableHeaders 
-            :columns="visibleColumns" 
-            :sort-config="sortConfig" 
-            @sort="handleSort"
-          />
-        </template>
-        
-        <TableContent 
-          :items="items" 
-          :columns="visibleColumns" 
-          :loading="isLoading" 
+        <TableHeaders
+          :columns="visibleColumns"
+          :sort-params="sortParams"
+          @sort-field="handleSortFieldChange"
+          @sort-order="handleSortDirectionChange"
+          @toggle-order="toggleSortDirection"
+        />
+
+        <TableContent
+          :columns="visibleColumns"
+          :items="items"
+          :loading="isLoading"
           :empty="isEmpty"
+          :error="error"
+          :on-retry="refresh"
         />
       </Table>
     </TableContainer>
 
-    <PaginationControls 
-      v-if="!isEmpty" 
-      :pagination="pagination" 
-      @page-change="handlePageChange" 
-      @page-size-change="handlePageSizeChange" 
+    <PaginationControls
+      :pagination="pagination"
+      @page-change="handlePageChange"
+      @page-size-change="handlePageSizeChange"
     />
   </div>
 </template>
 
 <script setup lang="ts">
-import { onUnmounted } from 'vue'
-import { Table } from '../ui/table/index'
-import TableControls from './TableControls.vue'
-import TableContainer from './TableContainer.vue'
-import TableHeaders from './TableHeaders.vue'
-import TableContent from './TableContent.vue'
-import PaginationControls from './PaginationControls.vue'
-import { useDataTable } from '../../app/composables/useDataTable'
-import type { ColumnDefinition } from '../../app/composables/useTableColumns'
+import {Table} from '@/components/ui/table'
+import TableControls from '@/components/data-table/TableControls.vue'
+import TableHeaders from '@/components/data-table/TableHeaders.vue'
+import TableContainer from '@/components/data-table/TableContainer.vue'
+import TableContent from '@/components/data-table/TableContent.vue'
+import PaginationControls from '@/components/data-table/PaginationControls.vue'
+import { useDataTable } from '@/app/composables/useDataTable.ts'
+import type { ColumnDefinition } from '@/app/types'
 
-// Props
-const props = defineProps({
-  fetchFn: {
-    type: Function as any,
-    required: true
-  },
-  columns: {
-    type: Array as any,
-    required: true
-  },
-  persistKey: {
-    type: String,
-    default: ''
-  },
-  defaultPageSize: {
-    type: Number,
-    default: 10
-  }
-})
+interface DataTableProps {
+  columns: ColumnDefinition[]
+  persistKey?: string
+  defaultPageSize?: number
+  globalDebounce?: number
+}
+
+const props = defineProps<DataTableProps>()
 
-// Composable com toda a l√≥gica da tabela
 const {
-  // Estados
   items,
   visibleColumns,
   isEmpty,
   isLoading,
   searchTerm,
   pagination,
-  sortConfig,
-  
-  // A√ß√µes
-  handleSort,
+  sortParams,
   handlePageChange,
   handlePageSizeChange,
   handleSearch,
   refresh,
-  dispose
+  error,
+  handleSortFieldChange,
+  handleSortDirectionChange,
+  toggleSortDirection,
 } = useDataTable({
   columns: props.columns,
   persistKey: props.persistKey,
   defaultPageSize: props.defaultPageSize,
-  fetchFn: props.fetchFn
-})
-
-// Cleanup no unmount
-onUnmounted(() => {
-  dispose()
+  globalDebounce: props.globalDebounce,
 })
 </script>
-
-<style>
-/* Classes espec√≠ficas para estiliza√ß√£o da tabela */
-.cell-actions {
-  @apply flex justify-end items-center gap-2;
-}
-</style>
diff --git a/src/components/data-table/PaginationControls.vue b/src/components/data-table/PaginationControls.vue
index 66a10b9..384cdac 100644
--- a/src/components/data-table/PaginationControls.vue
+++ b/src/components/data-table/PaginationControls.vue
@@ -26,7 +26,7 @@
             <ChevronLeftIcon class="h-3.5 w-3" />
           </Button>
         </div>
-        
+
         <div class="flex items-center space-x-1 flex-grow justify-center">
           <div class="flex items-center space-x-1">
             <span class="text-xs font-medium text-white/80">P√°gina</span>
@@ -35,7 +35,7 @@
             <span class="bg-black/30 px-1.5 py-1 rounded text-xs font-medium text-white border border-white/20">{{ totalPages || 1 }}</span>
           </div>
         </div>
-        
+
         <div class="flex items-center space-x-1">
           <Button
             variant="ghost"
@@ -60,7 +60,7 @@
             <ChevronLastIcon class="h-3.5 w-3" />
           </Button>
         </div>
-        
+
         <div class="hidden md:flex items-center pl-2 border-l border-white/20">
           <div class="flex items-center justify-center">
             <span class="text-xs font-medium text-white/70 mr-1">Itens</span>
@@ -86,40 +86,46 @@
 <script setup lang="ts">
 import { Button } from '@/components/ui/button'
 import { ChevronLeftIcon, ChevronRightIcon, ChevronFirstIcon, ChevronLastIcon } from 'lucide-vue-next'
+import { computed } from 'vue'
+import type {PaginationState} from "@/app/types";
+import {API_CONFIG} from "@/app/config/api.ts";
 
-// Op√ß√µes padr√£o de tamanho de p√°gina
-const pageSizeOptions = [10, 20, 30, 50, 100]
+const pageSizeOptions = API_CONFIG.PAGINATION.PAGE_SIZE_OPTIONS
 
 const props = defineProps<{
-  currentPage: number;
-  totalPages: number;
-  pageSize: number;
-}>()
+  pagination: PaginationState;
+}>();
+
+const currentPage = computed(() => props.pagination.page);
+const totalPages = computed(() => props.pagination.totalPages);
+const pageSize = computed(() => props.pagination.pageSize);
 
 const emit = defineEmits<{
-  (e: 'pageChange', page: number): void;
-  (e: 'pageSizeChange', pageSize: number): void;
-}>()
+  (e: 'page-change', page: number): void;
+  (e: 'page-size-change', pageSize: number): void;
+}>();
 
 const onPageChange = (page: number) => {
-  emit('pageChange', page)
-}
+  emit('page-change', page);
+};
 
 const onPageSizeChange = (event: Event) => {
-  const select = event.target as HTMLSelectElement
-  emit('pageSizeChange', parseInt(select.value))
-}
+  const select = event.target as HTMLSelectElement;
+  emit('page-size-change', parseInt(select.value));
+};
 </script>
 
 <style scoped>
 select {
   appearance: none;
+  text-align: center;
+  padding-left: 0 !important;
+  padding-right: 12px !important; /* Espa√ßo para a seta */
 }
 
 .items-per-page {
-  text-align: center;
-  padding-right: 8px !important;
   font-weight: 500;
+  text-align-last: center; /* Propriedade espec√≠fica para centralizar op√ß√µes em selects */
 }
 
 .select-wrapper {
@@ -128,7 +134,7 @@ select {
 }
 
 /* Adicionar seta customizada */
-.select-wrapper::before {
+.select-wrapper::after {
   content: '';
   position: absolute;
   right: 8px;
diff --git a/src/components/data-table/TableContainer.vue b/src/components/data-table/TableContainer.vue
index 38b52d2..eabd69f 100644
--- a/src/components/data-table/TableContainer.vue
+++ b/src/components/data-table/TableContainer.vue
@@ -1,17 +1,16 @@
 <template>
-  <div class="rounded-xl border border-white/20 overflow-hidden backdrop-blur-lg shadow-xl bg-black/40 w-full">
-    <div class="h-[60vh] overflow-y-auto overflow-x-auto custom-scrollbar w-full relative">
+  <div
+    class="rounded-xl border border-white/20 backdrop-blur-lg shadow-xl bg-black/40 w-full overflow-auto"
+  >
+    <div class="h-fit max-h-[60dvh] overflow-y-auto overflow-x-auto custom-scrollbar w-full">
       <slot></slot>
     </div>
   </div>
 </template>
 
-<script setup lang="ts">
-// Sem propriedades ou l√≥gica espec√≠fica, apenas encapsulando o container
-</script>
+<script setup lang="ts"></script>
 
 <style>
-/* Estiliza√ß√£o das scrollbars - com cores que combinam com o tema do site */
 .custom-scrollbar {
   scrollbar-width: thin;
   scrollbar-color: rgba(79, 70, 229, 0.6) rgba(0, 0, 0, 0.2);
@@ -30,19 +29,25 @@
 }
 
 .custom-scrollbar::-webkit-scrollbar-thumb {
-  background-color: rgba(79, 70, 229, 0.6); /* Cor prim√°ria com transpar√™ncia */
+  background: linear-gradient(135deg, rgba(79, 70, 229, 0.8), rgba(100, 90, 255, 0.6));
   border-radius: 4px;
-  border: 1px solid rgba(255, 255, 255, 0.1);
+  border: 1px solid rgba(255, 255, 255, 0.15);
+  box-shadow: inset 0 0 3px rgba(255, 255, 255, 0.2);
 }
 
 .custom-scrollbar::-webkit-scrollbar-thumb:hover {
-  background-color: rgba(79, 70, 229, 0.8); /* Cor mais intensa no hover */
+  background: linear-gradient(135deg, rgba(100, 90, 255, 0.9), rgba(120, 110, 255, 0.7));
+  border: 1px solid rgba(255, 255, 255, 0.25);
+}
+
+.custom-scrollbar::-webkit-scrollbar-corner {
+  background: rgba(0, 0, 0, 0.2);
 }
 
 /* Indicar rolagem horizontal em dispositivos m√≥veis */
 @media (max-width: 1024px) {
   .custom-scrollbar::after {
-    content: "";
+    content: '';
     position: absolute;
     top: 0;
     right: 0;
@@ -52,10 +57,10 @@
     pointer-events: none;
     z-index: 5;
   }
-  
+
   /* Destaque visual para indicar rolagem */
   .rounded-xl::before {
-    content: "‚óÑ deslize ‚ñ∫";
+    content: '‚óÑ deslize ‚ñ∫';
     position: absolute;
     bottom: 10px;
     right: 10px;
@@ -68,4 +73,4 @@
     opacity: 0.8;
   }
 }
-</style> 
\ No newline at end of file
+</style>
diff --git a/src/components/data-table/TableContent.vue b/src/components/data-table/TableContent.vue
index 70b83cd..3609aaf 100644
--- a/src/components/data-table/TableContent.vue
+++ b/src/components/data-table/TableContent.vue
@@ -1,140 +1,116 @@
 <template>
-  <TableBody class="h-full">
+  <TableBody>
     <template v-if="loading">
-      <LoadingState :columns-count="columns.length" :min-column-width="minColumnWidth" />
+      <div class="w-full h-full flex items-center justify-center">
+        <Loader2Icon class="h-16 w-16 animate-spin text-primary" />
+      </div>
     </template>
-    <template v-else-if="items.length">
-      <TableRow 
-        v-for="item in items" 
-        :key="item.id"
+    <template v-else-if="error">
+      <TableRow
+        class="w-full grid h-full flex items-center justify-center"
+        :style="gridTemplateColumnsStyle"
+      >
+        <TableCell :colspan="columns.length" class="col-span-full">
+          <ErrorState
+            title="Ocorreu um erro"
+            :message="errorMessage"
+            :error="error"
+            :on-retry="onRetry"
+          />
+        </TableCell>
+      </TableRow>
+    </template>
+    <template v-else-if="!empty && items.length">
+      <TableRow
+        v-for="(item, index) in items"
+        :key="tableContentHelper.getItemKey(item) || index"
         class="border-b border-white/10 hover:bg-white/5 transition-colors w-full grid gap-1"
         :style="gridTemplateColumnsStyle"
       >
-        <TableCell 
-          v-for="column in columns" 
-          :key="`${item.id}-${column.id}`"
-          v-memo="[item.id, column.id]"
-          class="text-white/80 py-3 min-h-[56px] text-center px-3 whitespace-normal break-words"
+        <TableCell
+          v-for="column in columns"
+          :key="`${tableContentHelper.getItemKey(item) || index}-${column.id}`"
+          class="text-white/80 py-3 min-h-[56px] px-3 flex items-center justify-center text-center"
         >
-          {{ formatCellValue(item, column.id) }}
+          <div class="w-full text-center truncate" :title="formatCellValue(item, column)">
+            {{ formatCellValue(item, column) }}
+          </div>
         </TableCell>
       </TableRow>
     </template>
     <template v-else>
-      <EmptyState :columns-count="columns.length" :min-column-width="minColumnWidth" />
+      <div class="w-full h-full flex items-center justify-center">
+        <p class="text-white/80 text-center text-lg font-medium">Nenhum operador encontrado.</p>
+      </div>
     </template>
   </TableBody>
 </template>
 
 <script setup lang="ts">
-import { defineComponent, h, markRaw, computed } from 'vue';
-import { TableBody, TableCell, TableRow } from '@/components/ui/table/index';
-import { Loader2Icon } from 'lucide-vue-next';
-
-interface TableColumn {
-  id: string;
-  title: string;
-  sortable: boolean;
-}
-
-interface DataItem {
-  id: number | string;
-  [key: string]: any;
-}
+import { computed } from 'vue'
+import { TableBody, TableCell, TableRow } from '@/components/ui/table/index'
+import { Loader2Icon } from 'lucide-vue-next'
+import { type ColumnDefinition, SortableFields } from '@/app/types'
+import TableContentHelper from '@/app/utils/TableContentHelper.ts'
+import ErrorState from './ErrorState.vue'
 
-const props = defineProps<{
-  columns: TableColumn[];
-  items: DataItem[];
-  loading: boolean;
-  empty?: boolean;
-  minColumnWidth?: number;
-  formatters?: Record<string, (value: any) => string>;
-}>();
-
-// Definir valores padr√£o para props opcionais
-const minColumnWidth = props.minColumnWidth || 140;
+const props = withDefaults(
+  defineProps<{
+    columns: ColumnDefinition[]
+    items: Record<string, unknown>[]
+    loading: boolean
+    empty: boolean
+    minColumnWidth?: number
+    formatters?: Record<string, (value: unknown) => string>
+    keyField?: string
+    error?: Error | null
+    onRetry?: () => void
+  }>(),
+  {
+    minColumnWidth: 140,
+  },
+)
 
-// Computed para grid de colunas - responsivo horizontal
+const tableContentHelper = new TableContentHelper(props)
 const gridTemplateColumnsStyle = computed(() => {
-  return `grid-template-columns: repeat(${props.columns.length}, minmax(${minColumnWidth}px, 1fr))`;
-});
+  return `grid-template-columns: repeat(${props.columns.length}, minmax(${props.minColumnWidth}px, 1fr))`
+})
+const formatCache = new Map<string, string>()
 
-// Cache para formata√ß√£o de valores
-const formatCache = new Map();
+const errorMessage = computed(() => {
+  if (!props.error) return ''
+  return props.error.message || 'N√£o foi poss√≠vel carregar os dados. Tente novamente mais tarde.'
+})
 
-// Formata√ß√£o dos valores das c√©lulas com cache
-const formatCellValue = (item: any, field: string) => {
-  const cacheKey = `${item.id}-${field}`;
-  if (formatCache.has(cacheKey)) {
-    return formatCache.get(cacheKey);
-  }
-  
-  const value = item[field];
-  let formatted;
-  
-  // Se temos um formatador espec√≠fico para este campo, us√°-lo
-  if (props.formatters && props.formatters[field]) {
-    formatted = props.formatters[field](value);
-  } 
-  // Caso padr√£o para data de registro
-  else if (field === 'registrationDate' && value) {
-    formatted = new Date(value).toLocaleDateString('pt-BR');
-  } 
-  // Fallback para outros campos
-  else {
-    formatted = value || '-';
-  }
-  
-  formatCache.set(cacheKey, formatted);
-  return formatted;
-};
+// Fun√ß√£o principal que coordena a formata√ß√£o
+const formatCellValue = (item: Record<string, unknown>, column: ColumnDefinition): string => {
+  const field = column.id
+  const cacheKey = tableContentHelper.generateCacheKey(item, field as string)
 
-// Componentes locais para estados de loading e vazio
-const LoadingState = markRaw(defineComponent({
-  props: {
-    columnsCount: Number,
-    minColumnWidth: Number
-  },
-  setup(props) {
-    return () => h(TableRow, {
-      class: "w-full grid gap-1", 
-      style: `grid-template-columns: repeat(${props.columnsCount}, minmax(${props.minColumnWidth}px, 1fr))`
-    }, [
-      h(TableCell, {
-        colspan: props.columnsCount,
-        class: "h-[60vh] col-span-full flex items-center justify-center"
-      }, [
-        h('div', { 
-          class: 'flex items-center justify-center',
-          style: 'margin-bottom: 10vh;' 
-        }, [
-          h(Loader2Icon, { class: 'h-8 w-8 animate-spin text-primary' })
-        ])
-      ])
-    ]);
+  // Verificar cache
+  const cachedValue = tableContentHelper.getFromCache(cacheKey, formatCache)
+  if (cachedValue !== null) {
+    return cachedValue
   }
-}));
 
-const EmptyState = markRaw(defineComponent({
-  props: {
-    columnsCount: Number,
-    minColumnWidth: Number
-  },
-  setup(props) {
-    return () => h(TableRow, {
-      class: "w-full grid gap-1", 
-      style: `grid-template-columns: repeat(${props.columnsCount}, minmax(${props.minColumnWidth}px, 1fr))`
-    }, [
-      h(TableCell, {
-        colspan: props.columnsCount,
-        class: "h-[60vh] text-white/70 col-span-full flex items-center justify-center"
-      }, [
-        h('div', { 
-          class: 'text-lg font-medium text-center w-full flex flex-col items-center justify-center',
-          style: 'margin-bottom: 10vh;' 
-        }, 'Nenhum operador encontrado.')
-      ])
-    ]);
+  const value = item[field]
+  let formatted: string
+
+  // Aplicar formata√ß√£o na ordem de prioridade
+  if (column.formatter && typeof column.formatter === 'function') {
+    formatted = tableContentHelper.applyColumnFormatter(value, column.formatter)
+  } else if (props.formatters && props.formatters[field as string]) {
+    formatted =
+      tableContentHelper.applyPropFormatter(value, field as string) ||
+      tableContentHelper.formatDefault(value)
+  } else if (field === SortableFields.REGISTRATION_DATE) {
+    formatted = tableContentHelper.formatDate(value) || tableContentHelper.formatDefault(value)
+  } else {
+    formatted = tableContentHelper.formatDefault(value)
   }
-}));
-</script> 
\ No newline at end of file
+
+  // Armazenar no cache
+  formatCache.set(cacheKey, formatted)
+  return formatted
+}
+</script>
diff --git a/src/components/data-table/TableControls.vue b/src/components/data-table/TableControls.vue
index 41c319a..80a134e 100644
--- a/src/components/data-table/TableControls.vue
+++ b/src/components/data-table/TableControls.vue
@@ -3,32 +3,34 @@
     <!-- Campo de pesquisa -->
     <div class="relative flex-1 max-w-full w-full md:max-w-md">
       <!-- √çcone fixo de pesquisa -->
-      <SearchIcon class="search-icon absolute left-5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white/60" />
-      
+      <SearchIcon
+        class="search-icon absolute left-5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white/60"
+      />
+
       <!-- √çcone de loading que aparece sobre o √≠cone de pesquisa -->
-      <LoaderIcon 
-        v-if="isActuallySearching" 
-        class="search-loading absolute left-5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-primary animate-spin" 
+      <LoaderIcon
+        v-if="isActuallySearching"
+        class="search-loading absolute left-5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-primary animate-spin"
       />
-      
-      <Input 
-        placeholder="Pesquisar operadores..." 
+
+      <Input
+        placeholder="Pesquisar operadores..."
         class="pl-12 py-6 bg-black/40 border-white/20 backdrop-blur-md text-white rounded-full shadow-lg placeholder:text-white/50 focus-visible:ring-white/40 focus-visible:border-white/30 w-full"
         v-model="searchTerm"
         @input="onSearchInput"
         aria-label="Pesquisar operadores"
       />
     </div>
-    
+
     <!-- Bot√£o de atualiza√ß√£o -->
-    <Button 
-      variant="default" 
+    <Button
+      variant="default"
       class="refresh-button bg-transparent border border-white/10 hover:bg-white/20 hover:border-white/30 text-white/90 hover:text-white backdrop-blur-sm text-sm font-medium rounded-full px-4 py-2 h-10 transition-all shadow-sm ml-auto mt-0 md:mt-0"
       @click="onRefresh"
       :disabled="isActuallySearching"
       aria-label="Atualizar dados"
     >
-      <RefreshCcwIcon v-if="!isRefreshing" class="mr-1.5 h-3.5 w-3.5" />
+      <RefreshCcwIcon v-if="!isActuallyRefreshing" class="mr-1.5 h-3.5 w-3.5" />
       <LoaderIcon v-else class="mr-1.5 h-3.5 w-3.5 animate-spin" />
       <span>Atualizar</span>
     </Button>
@@ -36,62 +38,65 @@
 </template>
 
 <script setup lang="ts">
-import { ref, onUnmounted, watch, computed } from 'vue';
-import { Input } from '@/components/ui/input';
-import { Button } from '@/components/ui/button';
-import { RefreshCcwIcon, SearchIcon, LoaderIcon } from 'lucide-vue-next';
-
-// Tipagem para as colunas
-interface TableColumn {
-  id: string;
-  title: string;
-  isVisible: boolean;
-  toggleVisibility: () => void;
-}
+import { ref, computed, watch } from 'vue'
+import { Input } from '@/components/ui/input'
+import { Button } from '@/components/ui/button'
+import { RefreshCcwIcon, SearchIcon, LoaderIcon } from 'lucide-vue-next'
+import { useDebounceFn } from '@vueuse/core'
 
 const props = defineProps<{
-  columns: TableColumn[];
-  isSearching?: boolean;
-  isRefreshing?: boolean;
-}>();
+  isSearching?: boolean
+  isRefreshing?: boolean
+  search_term?: string
+}>()
 
 const emit = defineEmits<{
-  (e: 'search', term: string): void;
-  (e: 'refresh'): void;
-}>();
+  (e: 'search', term: string): void
+  (e: 'refresh'): void
+}>()
+
+const searchTerm = ref(props.search_term || '')
+
+watch(
+  () => props.search_term,
+  (newValue) => {
+    if (
+      newValue !== undefined &&
+      newValue !== searchTerm.value &&
+      newValue !== '' &&
+      newValue.length > 2
+    ) {
+      searchTerm.value = newValue
+    }
+  },
+  { immediate: true },
+)
+
+const isActuallySearching = computed(() => Boolean(props.isSearching))
+const isActuallyRefreshing = computed(() => Boolean(props.isRefreshing))
+
+const debouncedSearch = useDebounceFn(() => {
+  emit('search', searchTerm.value)
+}, 1000)
 
-const searchTerm = ref('');
-
-// Garantir que isSearching seja tratado como booleano
-const isActuallySearching = computed(() => Boolean(props.isSearching));
-
-/**
- * Emite o evento de pesquisa imediatamente
- * O debounce ser√° gerenciado pelo componente pai
- */
 const onSearchInput = () => {
-  emit('search', searchTerm.value);
-};
+  debouncedSearch()
+}
 
-/**
- * Aciona o evento de atualiza√ß√£o de dados
- */
 const onRefresh = () => {
-  emit('refresh');
-};
+  emit('refresh')
+}
 </script>
 
 <style scoped>
-/* Garante que o √≠cone de pesquisa esteja vis√≠vel e corretamente posicionado */
 .search-icon {
   pointer-events: none;
   z-index: 10;
 }
 
-/* Estilo para o √≠cone de carregamento */
 .search-loading {
   pointer-events: none;
-  z-index: 20; /* Maior que o √≠cone de busca para ficar por cima */
+  z-index: 20;
 }
 
 input:focus ~ .search-icon {
@@ -123,7 +128,9 @@ input:focus ~ .search-icon {
   background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
   transform: scale(0);
   opacity: 0;
-  transition: transform 0.3s, opacity 0.3s;
+  transition:
+    transform 0.3s,
+    opacity 0.3s;
   pointer-events: none;
 }
 
diff --git a/src/components/data-table/TableHeaders.vue b/src/components/data-table/TableHeaders.vue
index 935479e..337a435 100644
--- a/src/components/data-table/TableHeaders.vue
+++ b/src/components/data-table/TableHeaders.vue
@@ -1,23 +1,34 @@
 <template>
-  <TableHeader class="sticky top-0 z-10 bg-black/60 backdrop-blur-md w-full">
-    <TableRow 
-      class="border-b border-white/20 w-full grid gap-1" 
-      :style="gridTemplateColumnsStyle"
-    >
-      <TableHead 
-        v-for="column in columns" 
+  <TableHeader class="sticky top-0 z-10 bg-black/60 backdrop-blur-md">
+    <TableRow class="border-b border-white/20 grid gap-1" :style="gridTemplateColumnsStyle">
+      <TableHead
+        v-for="column in columns"
         :key="column.id"
-        v-memo="[column.id, column.sortable, currentSortField === column.id, currentSortField === column.id ? currentSortOrder : '']"
+        v-memo="[
+          column.id,
+          column.sortable,
+          currentSortField === column.id,
+          currentSortField === column.id ? currentSortDirection : '',
+        ]"
         :class="getHeaderClasses(column)"
-        @click="column.sortable ? handleSorting(column.id) : undefined"
+        @click="column.sortable ? handleSorting(column.id as SortableFields) : null"
       >
-        <div class="flex items-center justify-between px-3 h-12 whitespace-nowrap">
-          <span class="whitespace-nowrap overflow-hidden text-ellipsis">{{ column.title }}</span>
-          <SortingIcon 
-            v-if="column.sortable" 
+        <div class="flex items-center justify-center gap-2 px-2 h-12 relative">
+          <p
+            class="whitespace-nowrap overflow-hidden text-ellipsis text-center"
+            :title="column.title"
+            @click.stop="column.sortable ? handleSortFieldClick(column.id as SortableFields) : null"
+          >
+            {{ column.title }}
+          </p>
+
+          <SortingIcon
+            v-if="column.sortable"
             :is-active="currentSortField === column.id"
-            :direction="currentSortField === column.id ? currentSortOrder : undefined"
-            :field="column.id"
+            :direction="currentSortField === column.id ? currentSortDirection : undefined"
+            :field="column.id as SortableFields"
+            class="ml-1 flex-shrink-0"
+            @click.stop="handleSortDirectionClick(column.id as SortableFields)"
           />
         </div>
       </TableHead>
@@ -26,87 +37,91 @@
 </template>
 
 <script setup lang="ts">
-import { computed, defineComponent, h, markRaw } from 'vue';
-import { TableHead, TableHeader, TableRow } from '@/components/ui/table/index';
-import { ArrowUpIcon, ArrowDownIcon, ArrowUpDownIcon } from 'lucide-vue-next';
-
-// Tipagem das props
-interface Column {
-  id: string;
-  title: string;
-  sortable: boolean;
-  isVisible?: boolean;
-}
-
-interface SortConfig {
-  field: string;
-  order: 'asc' | 'desc';
-}
+import { computed, defineComponent, h, markRaw } from 'vue'
+import { TableHead, TableHeader, TableRow } from '@/components/ui/table/index'
+import { ArrowUpIcon, ArrowDownIcon, ArrowUpDownIcon } from 'lucide-vue-next'
+import { SortDirection, type ColumnDefinition, SortableFields } from '@/app/types'
 
 const props = defineProps<{
-  columns: Column[];
-  sortConfig: SortConfig;
-  minColumnWidth?: number;
-}>();
+  columns: ColumnDefinition[]
+  sortParams: Record<string, string>
+  minColumnWidth?: number
+}>()
 
 // Definir valores padr√£o para props opcionais
-const minColumnWidth = props.minColumnWidth || 140;
+const minColumnWidth = props.minColumnWidth || 160
 
 // Computed para grid de colunas - responsivo horizontal
 const gridTemplateColumnsStyle = computed(() => {
-  return `grid-template-columns: repeat(${props.columns.length}, minmax(${minColumnWidth}px, 1fr))`;
-});
+  return `grid-template-columns: repeat(${props.columns.length}, minmax(${minColumnWidth}px, 1fr))`
+})
 
 const emit = defineEmits<{
-  (e: 'sort', field: string): void;
-}>();
+  (e: 'sort', field: SortableFields): void
+  (e: 'sort-field', field: SortableFields): void
+  (e: 'sort-order', order: SortDirection): void
+  (e: 'toggle-order'): void
+}>()
 
 // Componente para os √≠cones de ordena√ß√£o
-const SortingIcon = markRaw(defineComponent({
-  props: {
-    isActive: Boolean,
-    direction: String,
-    field: String
-  },
-  setup(props) {
-    return () => {
-      const isRegistrationDate = props.field === 'registrationDate';
-      const iconClass = isRegistrationDate ? 'h-4 w-4 min-w-4 min-h-4' : 'h-4 w-4';
-      
-      if (props.isActive && props.direction === 'asc') {
-        return h(ArrowUpIcon, { class: iconClass });
-      } else if (props.isActive && props.direction === 'desc') {
-        return h(ArrowDownIcon, { class: iconClass });
-      } else {
-        return h(ArrowUpDownIcon, { class: `${iconClass} opacity-50` });
+const SortingIcon = markRaw(
+  defineComponent({
+    props: {
+      isActive: Boolean,
+      direction: String,
+      field: String,
+    },
+    setup(props) {
+      return () => {
+        const baseClass = 'flex-shrink-0 transition-colors duration-200'
+        const iconClass = props.isActive
+          ? `${baseClass} h-4 w-4 text-white/50`
+          : `${baseClass} h-4 w-4 text-white/50 hover:text-white/80`
+
+        if (props.isActive && props.direction === SortDirection.ASC) {
+          return h(ArrowUpIcon, { class: iconClass })
+        } else if (props.isActive && props.direction === SortDirection.DESC) {
+          return h(ArrowDownIcon, { class: iconClass })
+        } else {
+          return h(ArrowUpDownIcon, { class: iconClass })
+        }
       }
-    };
-  }
-}));
+    },
+  }),
+)
 
-// Acesso facilitado aos valores do sortConfig
-const currentSortField = computed(() => props.sortConfig.field);
-const currentSortOrder = computed(() => props.sortConfig.order);
+const currentSortField = computed(() => props.sortParams.field)
+const currentSortDirection = computed(() => props.sortParams.order)
 
-// Gerenciamento das classes dos headers com cache para otimiza√ß√£o
-const headerClassesCache = new Map();
-const getHeaderClasses = (column: Column) => {
+const headerClassesCache = new Map()
+const getHeaderClasses = (column: ColumnDefinition) => {
   if (headerClassesCache.has(column.id)) {
-    return headerClassesCache.get(column.id);
+    return headerClassesCache.get(column.id)
   }
 
   const classes = [
-    'text-white/90 font-medium text-center',
-    'flex items-center',
-    { 'cursor-pointer hover:bg-white/10 transition-colors': column.sortable }
-  ];
+    'text-white/90 font-medium flex items-center justify-center text-center',
+    { 'cursor-pointer hover:bg-white/10 transition-colors': column.sortable },
+  ]
 
-  headerClassesCache.set(column.id, classes);
-  return classes;
-};
+  headerClassesCache.set(column.id, classes)
+  return classes
+}
+
+const handleSorting = (field: SortableFields) => {
+  emit('sort', field)
+}
 
-// Fun√ß√£o para lidar com a ordena√ß√£o
-const handleSorting = (field: string) => {
-  emit('sort', field);
-};
-</script> 
\ No newline at end of file
+const handleSortFieldClick = (field: SortableFields) => {
+  emit('sort-field', field)
+}
+
+const handleSortDirectionClick = (field: SortableFields) => {
+  if (field === currentSortField.value) {
+    emit('toggle-order')
+  } else {
+    emit('sort-field', field)
+    emit('sort-order', SortDirection.DESC)
+  }
+}
+</script>
diff --git a/src/components/data-table/index.ts b/src/components/data-table/index.ts
index e69de29..36fb038 100644
--- a/src/components/data-table/index.ts
+++ b/src/components/data-table/index.ts
@@ -0,0 +1,6 @@
+export * from './DataTable.vue'
+export * from './TableControls.vue'
+export * from './PaginationControls.vue'
+export * from './TableContainer.vue'
+export * from './TableHeaders.vue'
+export * from './TableContent.vue'
diff --git a/src/components/ui/table/Table.vue b/src/components/ui/table/Table.vue
index a423891..ac336c9 100644
--- a/src/components/ui/table/Table.vue
+++ b/src/components/ui/table/Table.vue
@@ -10,6 +10,7 @@ const props = defineProps<{
 <template>
   <div class="relative w-full overflow-auto">
     <table :class="cn('w-full caption-bottom text-sm', props.class)">
+      <slot name="header"></slot>
       <slot />
     </table>
   </div>
diff --git a/src/lib/axios.ts b/src/lib/axios.ts
index 5b67634..09ce6ef 100644
--- a/src/lib/axios.ts
+++ b/src/lib/axios.ts
@@ -1,46 +1,164 @@
-import axios from 'axios';
-import { API_CONFIG } from '@/app/config/api';
+import axios, { AxiosError } from 'axios'
+import { API_CONFIG } from '@/app/config/api'
+import type { ApiError } from '@/app/types'
+import { errorHandler, createAppError, ErrorType } from '@/app/utils/exceptionHandler'
+
+if (!API_CONFIG.BASE_URL) {
+  console.error('ERRO: VITE_API_URL n√£o est√° definida no arquivo .env')
+  errorHandler.handle(
+    createAppError(
+      'URL da API n√£o configurada',
+      ErrorType.API,
+      'A URL da API n√£o est√° configurada. Por favor, configure a vari√°vel VITE_API_URL no arquivo .env',
+    ),
+    'Inicializa√ß√£o da API',
+  )
+}
 
-// Criando uma inst√¢ncia do Axios com configura√ß√µes padr√£o
 const api = axios.create({
-  baseURL: API_CONFIG.BASE_URL,
+  baseURL: API_CONFIG.BASE_URL || 'http://localhost:8000',
   timeout: API_CONFIG.TIMEOUT,
-  headers: {
-    'Content-Type': 'application/json',
-  },
-});
+  headers: { 'Content-Type': 'application/json' },
+})
+
+let isRateLimited = false
+let rateLimitExpiresAt = 0
+let lastRateLimitMessageTime = 0
+
+const setRateLimit = (seconds: number) => {
+  isRateLimited = true
+  rateLimitExpiresAt = Date.now() + seconds * 1000
+
+  setTimeout(() => {
+    if (Date.now() >= rateLimitExpiresAt) {
+      isRateLimited = false
+      console.info('Rate limit expirado. Requisi√ß√µes podem ser retomadas.')
+    }
+  }, seconds * 1000)
+
+  console.warn(
+    `Rate limit ativado por ${seconds} segundos at√© ${new Date(rateLimitExpiresAt).toLocaleTimeString()}`,
+  )
+}
+
+const handleRateLimit = (headers: Record<string, string>) => {
+  const retryAfter = headers['retry-after']
+  const limitRemaining = headers['x-ratelimit-remaining']
+  const seconds = retryAfter ? parseInt(retryAfter) : 60
+
+  setRateLimit(seconds)
+
+  errorHandler.handle(
+    createAppError(
+      'Limite de requisi√ß√µes atingido',
+      ErrorType.API,
+      `Aguarde ${seconds} segundos antes de tentar novamente. Requisi√ß√µes restantes: ${limitRemaining || 0}`,
+      { seconds, limitRemaining },
+    ),
+    'Rate Limit',
+  )
+}
+
+const shouldBlockRequest = () => {
+  if (isRateLimited) {
+    const remainingTime = Math.ceil((rateLimitExpiresAt - Date.now()) / 1000)
+    const now = Date.now()
+
+    if (now - lastRateLimitMessageTime > 5000) {
+      lastRateLimitMessageTime = now
+
+      errorHandler.handle(
+        createAppError(
+          'Requisi√ß√£o bloqueada',
+          ErrorType.API,
+          `Limite de requisi√ß√µes atingido. Aguarde mais ${remainingTime} segundos.`,
+          { remainingTime },
+        ),
+        'Rate Limit',
+      )
+    }
+    return true
+  }
+  return false
+}
 
-// Interceptor para tratamento de requisi√ß√µes
 api.interceptors.request.use(
   (config) => {
-    config.headers['Origin'] = 'localhost:5173';
-    config.headers['Access-Control-Allow-Methods'] = 'GET';
-    return config;
+    if (shouldBlockRequest()) {
+      const rateLimitError = createAppError(
+        'Requisi√ß√£o cancelada devido a rate limit ativo',
+        ErrorType.API,
+      )
+      rateLimitError.name = 'RateLimitError'
+      return Promise.reject(rateLimitError)
+    }
+
+    return config
   },
-  (error) => {
-    return Promise.reject(error);
-  }
-);
+  (error: Error) => {
+    errorHandler.handle(
+      createAppError(
+        'Erro ao preparar requisi√ß√£o',
+        ErrorType.NETWORK,
+        'N√£o foi poss√≠vel enviar a requisi√ß√£o para o servidor.',
+        { originalError: error },
+      ),
+      'Requisi√ß√£o HTTP',
+    )
+    return Promise.reject(error)
+  },
+)
 
-// Interceptor para tratamento de respostas
 api.interceptors.response.use(
   (response) => {
-    return response;
+    return response
   },
-  (error) => {
-    // Tratamento centralizado de erros
+  (error: AxiosError<ApiError>) => {
+    if (error.name === 'RateLimitError') {
+      return Promise.reject(error)
+    }
+
     if (error.response) {
-      // A requisi√ß√£o foi feita e o servidor respondeu com um status fora do intervalo 2xx
-      console.error('Erro de resposta:', error.response.data);
+      if (error.response.status === 429) {
+        handleRateLimit(error.response.headers as Record<string, string>)
+      } else {
+        const data = error.response.data
+        const title = data?.title ?? 'Erro na requisi√ß√£o'
+        const message =
+          data?.userMessage ?? 'Ocorreu um erro inesperado. Tente novamente mais tarde.'
+
+        errorHandler.handle(
+          createAppError(title, ErrorType.API, message, {
+            status: error.response.status,
+            url: error.config?.url,
+          }),
+          'API',
+        )
+      }
     } else if (error.request) {
-      // A requisi√ß√£o foi feita mas n√£o houve resposta
-      console.error('Erro de requisi√ß√£o:', error.request);
+      errorHandler.handle(
+        createAppError(
+          'Falha na comunica√ß√£o',
+          ErrorType.NETWORK,
+          'N√£o foi poss√≠vel obter resposta do servidor. Verifique sua conex√£o.',
+          { request: error.request },
+        ),
+        'Conex√£o API',
+      )
     } else {
-      // Algo aconteceu na configura√ß√£o da requisi√ß√£o que desencadeou um erro
-      console.error('Erro:', error.message);
+      errorHandler.handle(
+        createAppError(
+          'Erro inesperado',
+          ErrorType.UNKNOWN,
+          'Um erro inesperado ocorreu. Tente novamente mais tarde.',
+          { error },
+        ),
+        'Axios',
+      )
     }
-    return Promise.reject(error);
-  }
-);
 
-export default api; 
\ No newline at end of file
+    return Promise.reject(error)
+  },
+)
+
+export default api
